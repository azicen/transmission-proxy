// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"transmission-proxy/conf"
	"transmission-proxy/internal/data"
	"transmission-proxy/internal/domain"
	"transmission-proxy/internal/service"
	"transmission-proxy/internal/trigger"
)

import (
	_ "github.com/azicen/kratos-extension/encoding"
	_ "github.com/joho/godotenv/autoload"
	_ "go.uber.org/automaxprocs"
	_ "transmission-proxy/encoding"
)

// Injectors from wire.go:

// initApp init kratos application.
func initApp(bootstrap *conf.Bootstrap, logger log.Logger) (*kratos.App, func(), error) {
	infra, cleanup, err := data.NewInfra(bootstrap, logger)
	if err != nil {
		return nil, nil, err
	}
	appRepo := data.NewAppDao(infra, logger)
	appUsecase := domain.NewAppUsecase(appRepo, logger)
	appService := service.NewAppService(appUsecase)
	torrentRepo, err := data.NewTorrentDao(infra, logger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	torrentUsecase := domain.NewTorrentUsecase(bootstrap, torrentRepo, logger)
	authService := service.NewAuthService(torrentUsecase)
	syncService := service.NewSyncService(torrentUsecase)
	torrentService := service.NewTorrentService(torrentUsecase)
	transferService := service.NewTransferService(appUsecase)
	server := trigger.NewHTTPServer(bootstrap, appService, authService, syncService, torrentService, transferService, logger)
	scheduledTask, cleanup2 := trigger.NewScheduledTask(bootstrap, torrentUsecase, logger)
	app := newApp(logger, server, scheduledTask)
	return app, func() {
		cleanup2()
		cleanup()
	}, nil
}
